import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Sidebar from '../../components/Sidebar';
import appIcon from '../../assets/appicon.png';

const initialData = [
  {
    id: 1,
    code: "GKB0001",
    patient: "Nguy·ªÖn VƒÉn A",
    title: "C·∫•p c·ª©u",
    room: "Ph√≤ng c·∫•p c·ª©u",
    doctor: "BS. Tr·∫ßn VƒÉn B",
    date: "2025-07-25",
    status: "ƒê√£ kh√°m",
  },
  {
    id: 2,
    code: "GKB0002",
    patient: "Tr·∫ßn Th·ªã B",
    title: "N·ªôi soi",
    room: "N·ªôi soi",
    doctor: "BS. Nguy·ªÖn VƒÉn C",
    date: "2025-07-25",
    status: "Ch∆∞a kh√°m",
  },
  {
    id: 3,
    code: "GKB0003",
    patient: "L√™ VƒÉn C",
    title: "Kh√°m t·ªïng qu√°t",
    room: "Ph√≤ng 101",
    doctor: "BS. L√™ Th·∫Øng",
    date: "2025-07-24",
    status: "ƒê√£ kh√°m",
  },
  {
    id: 4,
    code: "GKB0004",
    patient: "Ph·∫°m Th·ªã D",
    title: "Kh√°m m·∫Øt",
    room: "Ph√≤ng m·∫Øt",
    doctor: "BS. Nguy·ªÖn VƒÉn A",
    date: "2025-07-23",
    status: "Ch∆∞a kh√°m",
  },
  {
    id: 5,
    code: "GKB0005",
    patient: "Ng√¥ VƒÉn E",
    title: "Kh√°m tai m≈©i h·ªçng",
    room: "Ph√≤ng TMH",
    doctor: "BS. Tr·∫ßn Th·ªã B",
    date: "2025-07-22",
    status: "ƒê√£ kh√°m",
  },
  {
    id: 6,
    code: "GKB0006",
    patient: "ƒê·ªó Th·ªã F",
    title: "Kh√°m da li·ªÖu",
    room: "Ph√≤ng da li·ªÖu",
    doctor: "BS. Ph·∫°m VƒÉn C",
    date: "2025-07-21",
    status: "Ch∆∞a kh√°m",
  },
  {
    id: 7,
    code: "GKB0007",
    patient: "B√πi VƒÉn G",
    title: "Kh√°m n·ªôi t·ªïng qu√°t",
    room: "Ph√≤ng 102",
    doctor: "BS. L√™ Th·∫Øng",
    date: "2025-07-20",
    status: "ƒê√£ kh√°m",
  },
  {
    id: 8,
    code: "GKB0008",
    patient: "V≈© Th·ªã H",
    title: "Kh√°m ngo·∫°i t·ªïng qu√°t",
    room: "Ph√≤ng 103",
    doctor: "BS. Nguy·ªÖn VƒÉn A",
    date: "2025-07-19",
    status: "Ch∆∞a kh√°m",
  },
  {
    id: 9,
    code: "GKB0009",
    patient: "Tr·ªãnh VƒÉn I",
    title: "Kh√°m s·∫£n",
    room: "Ph√≤ng s·∫£n",
    doctor: "BS. Tr·∫ßn Th·ªã B",
    date: "2025-07-18",
    status: "ƒê√£ kh√°m",
  },
  {
    id: 10,
    code: "GKB0010",
    patient: "L√Ω Th·ªã K",
    title: "Kh√°m nhi",
    room: "Ph√≤ng nhi",
    doctor: "BS. Ph·∫°m VƒÉn C",
    date: "2025-07-17",
    status: "Ch∆∞a kh√°m",
  },
  {
    id: 11,
    code: "GKB0011",
    patient: "Phan VƒÉn L",
    title: "Kh√°m t·ªïng qu√°t",
    room: "Ph√≤ng 104",
    doctor: "BS. L√™ Th·∫Øng",
    date: "2025-07-16",
    status: "ƒê√£ kh√°m",
  },
  {
    id: 12,
    code: "GKB0012",
    patient: "ƒê·∫∑ng Th·ªã M",
    title: "Kh√°m n·ªôi soi",
    room: "Ph√≤ng n·ªôi soi",
    doctor: "BS. Nguy·ªÖn VƒÉn A",
    date: "2025-07-15",
    status: "Ch∆∞a kh√°m",
  },
];



function QLGKB() {
  const navigate = useNavigate();
  const [menuOpen, setMenuOpen] = useState(false);
  const [search, setSearch] = useState("");
  const [data, setData] = useState(initialData);
  const [showDelete, setShowDelete] = useState(false);
  const [deleteCode, setDeleteCode] = useState<string | null>(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [showAddSuccess, setShowAddSuccess] = useState(false);

  // Check if new GKB was added and show success message
  useEffect(() => {
    const newGKBAdded = localStorage.getItem('newGKBAdded');
    if (newGKBAdded === 'true') {
      setShowAddSuccess(true);
      localStorage.removeItem('newGKBAdded'); // Clean up
      
      // Auto hide after 5 seconds
      const timer = setTimeout(() => {
        setShowAddSuccess(false);
      }, 5000);
      
      return () => clearTimeout(timer);
    }
  }, []);

  const handleMenuSelect = (option: string) => {
    setMenuOpen(false);
    if (option === "Th√¥ng tin c√° nh√¢n") navigate("/profile");
    else if (option === "ƒê·ªïi m·∫≠t kh·∫©u") navigate("/changepassword");
    else if (option === "Tho√°t") navigate("/login");
  };

  const filtered = data.filter(
    (item) =>
      item.code.toLowerCase().includes(search.toLowerCase()) ||
      item.patient.toLowerCase().includes(search.toLowerCase()) ||
      item.title.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <>
      <div style={{ minHeight: '100vh', width: '100vw', display: 'flex', background: '#f5f6fa' }}>
        {/* Sidebar */}
        <Sidebar activePage="Gi·∫•y kh√°m b·ªánh" />
        {/* Main content */}
        <div style={{ flex: 1, padding: '32px 16px 0 16px', minWidth: 0, display: 'flex', flexDirection: 'column' }}>
          <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', gap: 16, flexWrap: 'wrap' }}>
            <img src={appIcon} alt="logo" style={{ width: 40, borderRadius: '50%' }} />
            <span style={{ fontWeight: 500, fontSize: 18, color: '#2d4a7a' }}>Admin</span>
            <div style={{ position: 'relative' }}>
              <button
                style={{ background: 'none', border: 'none', cursor: 'pointer', fontSize: 18 }}
                onClick={() => setMenuOpen(!menuOpen)}
              >
                ‚ñº
              </button>
              {menuOpen && (
                <div style={{ position: 'absolute', right: 0, top: 32, background: '#fff', boxShadow: '0 2px 8px #0002', borderRadius: 8, minWidth: 220, zIndex: 10 }}>
                  <div onClick={() => handleMenuSelect('Th√¥ng tin c√° nh√¢n')}
                    style={{ padding: '12px 28px', cursor: 'pointer', borderBottom: '1px solid #eee', display: 'flex', alignItems: 'center', gap: 12, whiteSpace: 'nowrap' }}>
                    <span>üë§</span> Th√¥ng tin c√° nh√¢n
                  </div>
                  <div onClick={() => handleMenuSelect('ƒê·ªïi m·∫≠t kh·∫©u')}
                    style={{ padding: '12px 28px', cursor: 'pointer', borderBottom: '1px solid #eee', display: 'flex', alignItems: 'center', gap: 12, whiteSpace: 'nowrap' }}>
                    <span>üîë</span> ƒê·ªïi m·∫≠t kh·∫©u
                  </div>
                  <div onClick={() => handleMenuSelect('Tho√°t')}
                    style={{ padding: '12px 28px', cursor: 'pointer', color: 'red', display: 'flex', alignItems: 'center', gap: 12, whiteSpace: 'nowrap' }}>
                    <span>‚èª</span> Tho√°t
                  </div>
                </div>
              )}
            </div>
          </div>
          {/* Main content area */}
          <div style={{ fontSize: 18, color: '#888', marginBottom: 8, marginTop: 8 }}>Qu·∫£n l√Ω / Danh s√°ch gi·∫•y kh√°m b·ªánh</div>
          <h2 style={{ color: "#2d4a7a", fontWeight: 600, marginBottom: 18 }}>Danh s√°ch gi·∫•y kh√°m b·ªánh</h2>
          <div style={{ background: '#fff', borderRadius: 16, padding: 24, marginBottom: 24 }}>
            <div style={{ display: 'flex', gap: 12, alignItems: 'center', marginBottom: 18 }}>
              <span style={{ fontSize: 22, color: '#aaa' }}>üîç</span>
              <input
                type="text"
                placeholder="Nh·∫≠p th√¥ng tin"
                value={search}
                onChange={e => setSearch(e.target.value)}
                style={{
                  flex: 1,
                  minWidth: 220,
                  padding: 10,
                  borderRadius: 8,
                  border: '1px solid #ccc',
                  fontSize: 15,
                  marginRight: 8,
                }}
              />
              <button style={{ background: '#1ec9a4', color: '#fff', border: 'none', borderRadius: 8, padding: '10px 28px', fontWeight: 500, fontSize: 16, cursor: 'pointer' }}>T√¨m ki·∫øm</button>
            </div>
            <div style={{ overflowX: 'auto', borderRadius: 12 }}>
              <table style={{ width: '100%', borderCollapse: 'collapse', minWidth: 900 }}>
                <thead>
                  <tr style={{ background: '#e3ecfa', color: '#2d4a7a' }}>
                    <th style={{ padding: 12 }}>STT</th>
                    <th style={{ padding: 12 }}>M√£</th>
                    <th style={{ padding: 12 }}>T√™n b·ªánh nh√¢n</th>
                    <th style={{ padding: 12 }}>Ti√™u ƒë·ªÅ</th>
                    <th style={{ padding: 12 }}>Ph√≤ng kh√°m</th>
                    <th style={{ padding: 12 }}>B√°c sƒ©</th>
                    <th style={{ padding: 12 }}>Ng√†y</th>
                    <th style={{ padding: 12 }}>Tr·∫°ng th√°i</th>
                    <th style={{ padding: 12 }}>H√†nh ƒë·ªông</th>
                  </tr>
                </thead>
                <tbody>
                  {filtered.length === 0 ? (
                    <tr>
                      <td colSpan={9} style={{ textAlign: 'center', padding: 32, color: '#888' }}>Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.</td>
                    </tr>
                  ) : (
                    filtered.map((item, idx) => (
                      <tr key={item.id} style={{ borderBottom: '1px solid #f0f0f0' }}>
                        <td style={{ padding: 12, fontSize: 12 }}>{idx + 1}</td>
                        <td style={{ padding: 12, fontSize: 12 }}>{item.code}</td>
                        <td style={{ padding: 12, fontSize: 12 }}>{item.patient}</td>
                        <td style={{ padding: 12, fontSize: 12 }}>{item.title}</td>
                        <td style={{ padding: 12, fontSize: 12 }}>{item.room}</td>
                        <td style={{ padding: 12, fontSize: 12 }}>{item.doctor}</td>
                        <td style={{ padding: 12, fontSize: 12 }}>{item.date}</td>
                        <td style={{ padding: 12 }}>
                          {item.status === "ƒê√£ kh√°m" ? (
                            <span style={{ background: '#1ec9a4', color: '#fff', borderRadius: 8, padding: '6px 18px', fontWeight: 500, fontSize: 12 }}>ƒê√£ kh√°m</span>
                          ) : (
                            <span style={{ background: '#ffb74d', color: '#fff', borderRadius: 8, padding: '6px 18px', fontWeight: 500, fontSize: 12 }}>Ch∆∞a kh√°m</span>
                          )}
                        </td>
                        <td style={{ padding: 12, textAlign: 'center', minWidth: 120 }}>
                          <span
                            title="Xem"
                            style={{ color: '#1ec9a4', fontSize: 12, marginRight: 8, cursor: 'pointer' }}
                            onClick={() => navigate('/qlgkb/detail')}
                          >
                            üëÅÔ∏è
                          </span>
                          <span
                            title="In"
                            style={{ color: '#1ec9a4', fontSize: 12, marginRight: 8, cursor: 'pointer' }}
                            onClick={() => navigate('/qlgkb/print')}
                          >
                            üñ®Ô∏è
                          </span>
                          <span
                            title="S·ª≠a"
                            style={{ color: '#1ec9a4', fontSize: 12, marginRight: 8, cursor: 'pointer' }}
                            onClick={() => navigate('/qlgkb/edit')}
                          >
                            ‚úèÔ∏è
                          </span>
                          <span
                            title="X√≥a"
                            style={{ color: '#e53935', fontSize: 12, cursor: 'pointer' }}
                            onClick={() => { setShowDelete(true); setDeleteCode(item.code); }}
                          >
                            üóëÔ∏è
                          </span>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Popup x√°c nh·∫≠n x√≥a */}
        {showDelete && (
          <div style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100vw',
            height: '100vh',
            background: 'rgba(0,0,0,0.2)',
            zIndex: 1000,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}>
            <div style={{ background: '#fff', borderRadius: 12, padding: 32, minWidth: 340, boxShadow: '0 2px 16px #0003', textAlign: 'center' }}>
              <div style={{ fontSize: 18, marginBottom: 18 }}>
                B·∫°n c√≥ mu·ªën x√≥a gi·∫•y kh√°m b·ªánh <b>{deleteCode}</b> kh√¥ng?
              </div>
              <div style={{ display: 'flex', justifyContent: 'center', gap: 24 }}>
                <button
                  style={{ background: '#e53935', color: '#fff', border: 'none', borderRadius: 6, padding: '8px 32px', fontSize: 16, fontWeight: 500, cursor: 'pointer' }}
                  onClick={() => {
                    setData(prev => prev.filter(item => item.code !== deleteCode));
                    setShowDelete(false);
                    setDeleteCode(null);
                    setShowSuccess(true);
                    setTimeout(() => setShowSuccess(false), 2000);
                  }}
                >
                  C√≥
                </button>
                <button
                  style={{ background: '#888', color: '#fff', border: 'none', borderRadius: 6, padding: '8px 32px', fontSize: 16, fontWeight: 500, cursor: 'pointer' }}
                  onClick={() => { setShowDelete(false); setDeleteCode(null); }}
                >
                  Kh√¥ng
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
      {/* Success message for delete */}
      {showSuccess && (
        <div style={{
          position: 'fixed',
          top: 32,
          left: '50%',
          transform: 'translateX(-50%)',
          background: '#1ec9a4',
          color: '#fff',
          padding: '12px 32px',
          borderRadius: 8,
          fontSize: 18,
          fontWeight: 500,
          zIndex: 2000,
          boxShadow: '0 2px 8px #0002',
        }}>
          ƒê√£ x√≥a th√†nh c√¥ng
        </div>
      )}
      
      {/* Success message for add */}
      {showAddSuccess && (
        <div style={{
          position: 'fixed',
          top: 32,
          left: '50%',
          transform: 'translateX(-50%)',
          background: '#1ec9a4',
          color: '#fff',
          padding: '12px 32px',
          borderRadius: 8,
          fontSize: 18,
          fontWeight: 500,
          zIndex: 2000,
          boxShadow: '0 2px 8px #0002',
        }}>
          Th√¥ng tin gi·∫•y kh√°m b·ªánh ƒë∆∞·ª£c th√™m m·ªõi th√†nh c√¥ng
        </div>
      )}
    </>
  );
}

export default QLGKB; 