import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useVatTu } from '../../contexts/VatTuContext';
import SuccessNotification from '../../components/SuccessNotification';
import appIcon from '../../assets/appicon.png';

const sidebarItems = [
  { label: "Trang ch·ªß", icon: "üè†", route: "/main" },
  { label: "Gi·∫•y kh√°m b·ªánh", icon: "üìÑ", route: "/qlgkb" },
  { label: "B·ªánh nh√¢n", icon: "üë§", route: "/danh-sach-benh-nhan" },
  { label: "ƒê∆°n thu·ªëc", icon: "üìù", route: "/qldonthuoc" },
  { label: "Thu·ªëc", icon: "‚ûï", route: "/thuoc" },
  { label: "V·∫≠t t∆∞", icon: "üîß", route: "/qlvattu" },
  { label: "H·ªó tr·ª£ k·ªπ thu·∫≠t", icon: "üí°", route: "/hotro" },
  { label: "C√†i ƒë·∫∑t", icon: "‚öôÔ∏è", route: "/caidat" },
];

const typeOptions = [
  "Ti√™u hao d√πng 1 l·∫ßn",
  "Ti√™u hao nhi·ªÅu l·∫ßn", 
  "D·ª•ng c·ª• h·ªó tr·ª£ kh√°m",
  "Thi·∫øt b·ªã vƒÉn ph√≤ng"
];

const storageOptions = [
  "T·ªß v·∫≠t t∆∞ 1", "T·ªß v·∫≠t t∆∞ 2", "T·ªß v·∫≠t t∆∞ 3", "T·ªß v·∫≠t t∆∞ 4", "T·ªß v·∫≠t t∆∞ 5"
];

// C√°c l·ª±a ch·ªçn cho t√™n v·∫≠t t∆∞ theo lo·∫°i
const nameOptionsByType: Record<string, string[]> = {
  "Ti√™u hao d√πng 1 l·∫ßn": [
    "GƒÉng tay cao su",
    "GƒÉng tay nitrile",
    "Kh·∫©u trang 3 l·ªõp",
    "Kim ti√™m 23G/25G",
    "·ªêng ti√™m 1ml",
    "·ªêng ti√™m 3ml",
    "·ªêng ti√™m 5ml",
    "G·∫°c v√¥ tr√πng",
    "B√¥ng th·∫•m",
    "BƒÉng cu·ªôn",
    "·ªêng nghi·ªám m√°u",
    "Que th·ª≠ ƒë∆∞·ªùng huy·∫øt",
    "Que th·ª≠ n∆∞·ªõc ti·ªÉu"
  ],
  "Ti√™u hao nhi·ªÅu l·∫ßn": [
    "C·ªìn 70 ƒë·ªô",
    "Chlorhexidine",
    "Gel r·ª≠a tay",
    "KhƒÉn lau tay",
    "Gi·∫•y kh√°m b·ªánh",
    "Gi·∫•y x√©t nghi·ªám",
    "TƒÉm b√¥ng v√¥ tr√πng",
    "Que ƒë√® l∆∞·ª°i g·ªó"
  ],
  "D·ª•ng c·ª• h·ªó tr·ª£ kh√°m": [
    "ƒê√®n soi tai",
    "G∆∞∆°ng soi h·ªçng",
    "·ªêng n·ªôi soi nh·ªè",
    "M√°y ƒëo huy·∫øt √°p ƒëi·ªán t·ª≠",
    "M√°y ƒëo huy·∫øt √°p th·ªßy ng√¢n",
    "·ªêng nghe y t·∫ø 1 ƒë·∫ßu",
    "·ªêng nghe y t·∫ø 2 ƒë·∫ßu",
    "Glucometer",
    "Que th·ª≠ ƒë∆∞·ªùng huy·∫øt",
    "Nhi·ªát k·∫ø h·ªìng ngo·∫°i",
    "Nhi·ªát k·∫ø ƒëi·ªán t·ª≠",
    "M√°y x√©t nghi·ªám n∆∞·ªõc ti·ªÉu",
    "M√°y test nhanh n∆∞·ªõc ti·ªÉu"
  ],
  "Thi·∫øt b·ªã vƒÉn ph√≤ng": [
    "M√°y in phi·∫øu kh√°m",
    "Gi·∫•y in toa thu·ªëc",
    "Th·∫ª t·ª´",
    "H·ªì s∆°",
    "S·ªï kh√°m",
    "ƒê∆°n thu·ªëc",
    "H√≥a ƒë∆°n"
  ]
};

function EditVT() {
  const navigate = useNavigate();
  const location = useLocation();
  const { updateVatTu } = useVatTu();
  const [active] = useState("V·∫≠t t∆∞");
  const [menuOpen, setMenuOpen] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);

  // Form state
  const [formData, setFormData] = useState({
    id: "",
    name: "",
    price: "",
    type: "",
    storage: "",
    dateImport: "",
    expiry: "",
    stock: "",
    supplier: ""
  });

  // Load existing data from location state
  useEffect(() => {
    if (location.state?.vatTu) {
      const vatTu = location.state.vatTu;
      setFormData({
        id: vatTu.id,
        name: vatTu.name,
        price: vatTu.price,
        type: vatTu.type,
        storage: vatTu.storage,
        dateImport: vatTu.dateImport,
        expiry: vatTu.expiry,
        stock: vatTu.stock,
        supplier: vatTu.supplier
      });
    }
  }, [location.state]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate required fields
    if (!formData.name || !formData.price || !formData.type || !formData.storage || 
        !formData.dateImport || !formData.expiry || !formData.stock || !formData.supplier) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }

    // Update the vatTu
    updateVatTu(formData.id, {
      name: formData.name,
      price: formData.price,
      type: formData.type,
      storage: formData.storage,
      dateImport: formData.dateImport,
      expiry: formData.expiry,
      stock: formData.stock,
      supplier: formData.supplier
    });

    setShowSuccess(true);
    setTimeout(() => {
      setShowSuccess(false);
      navigate('/qlvattu');
    }, 2000);
  };

  const handleCancel = () => {
    navigate('/qlvattu');
  };

  return (
    <div style={{ minHeight: '100vh', width: '100vw', display: 'flex', background: '#f5f6fa', position: 'relative' }}>
      {/* Success Notification */}
      {showSuccess && (
        <SuccessNotification 
          message={`C·∫≠p nh·∫≠t ${formData.name} th√†nh c√¥ng`}
          isVisible={showSuccess}
          onClose={() => setShowSuccess(false)}
        />
      )}

      {/* Sidebar */}
      <div style={{ width: 250, minWidth: 70, background: '#2d4a7a', color: '#fff', display: 'flex', flexDirection: 'column', alignItems: 'center', paddingTop: 24, position: 'relative' }}>
        <img src={appIcon} alt="logo" style={{ width: '70%', maxWidth: 90, minWidth: 50, borderRadius: '50%', marginBottom: 24, background: '#fff', objectFit: 'cover' }} />
        {sidebarItems.map(item => (
          <div
            key={item.label}
            onClick={() => navigate(item.route)}
            style={{
              width: '90%',
              padding: '12px 16px',
              margin: '4px 0',
              borderRadius: 8,
              cursor: 'pointer',
              background: active === item.label ? '#1e3a8a' : 'transparent',
              display: 'flex',
              alignItems: 'center',
              gap: 12,
              fontSize: 14,
              fontWeight: 500,
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => {
              if (active !== item.label) {
                e.currentTarget.style.background = '#1e40af';
              }
            }}
            onMouseOut={(e) => {
              if (active !== item.label) {
                e.currentTarget.style.background = 'transparent';
              }
            }}
          >
            <span style={{ fontSize: 18 }}>{item.icon}</span>
            <span>{item.label}</span>
          </div>
        ))}
      </div>

      {/* Main Content */}
      <div style={{ flex: 1, display: 'flex', flexDirection: 'column', padding: '24px 32px' }}>
        {/* Header */}
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 32 }}>
          <div>
            <h1 style={{ margin: 0, fontSize: 28, fontWeight: 'bold', color: '#1e293b', marginBottom: 8 }}>
              Ch·ªânh s·ª≠a v·∫≠t t∆∞
            </h1>
            <p style={{ margin: 0, fontSize: 16, color: '#64748b' }}>
              ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin c√≥ b√™n d∆∞·ªõi
            </p>
          </div>
          <div style={{ position: 'relative' }}>
            <button
              onClick={() => setMenuOpen(!menuOpen)}
              style={{
                background: '#fff',
                border: '1px solid #e2e8f0',
                borderRadius: '50%',
                width: 48,
                height: 48,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                cursor: 'pointer',
                fontSize: 14,
                fontWeight: 'bold',
                color: '#1e293b'
              }}
            >
              M·∫°nh
            </button>
          </div>
        </div>

        {/* Form */}
        <div style={{ background: '#fff', borderRadius: 12, padding: '32px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' }}>
          <form onSubmit={handleSubmit}>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px', marginBottom: '32px' }}>
              {/* Left Column */}
              <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    T√™n v·∫≠t t∆∞
                  </label>
                  {formData.type && nameOptionsByType[formData.type] ? (
                    <select
                      value={formData.name}
                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                      style={{
                        width: '100%',
                        padding: '12px 16px',
                        border: '1px solid #d1d5db',
                        borderRadius: '8px',
                        fontSize: '14px',
                        outline: 'none',
                        background: '#fff',
                        cursor: 'pointer'
                      }}
                    >
                      <option value="">Ch·ªçn t√™n v·∫≠t t∆∞</option>
                      {nameOptionsByType[formData.type].map(option => (
                        <option key={option} value={option}>{option}</option>
                      ))}
                    </select>
                  ) : (
                    <input
                      type="text"
                      value={formData.name}
                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                      placeholder="Nh·∫≠p t√™n v·∫≠t t∆∞"
                      style={{
                        width: '100%',
                        padding: '12px 16px',
                        border: '1px solid #d1d5db',
                        borderRadius: '8px',
                        fontSize: '14px',
                        outline: 'none',
                        transition: 'border-color 0.2s'
                      }}
                      onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
                      onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                    />
                  )}
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Gi√° (VNƒê)
                  </label>
                  <input
                    type="text"
                    value={formData.price}
                    onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Lo·∫°i v·∫≠t t∆∞
                  </label>
                  <select
                    value={formData.type}
                    onChange={(e) => {
                      const newType = e.target.value;
                      const newName = nameOptionsByType[newType]?.[0] || '';
                      setFormData({ ...formData, type: newType, name: newName });
                    }}
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      outline: 'none',
                      background: '#fff',
                      cursor: 'pointer'
                    }}
                  >
                    <option value="">Ch·ªçn lo·∫°i v·∫≠t t∆∞</option>
                    {typeOptions.map(option => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    V·ªã tr√≠ l∆∞u tr·ªØ
                  </label>
                  <select
                    value={formData.storage}
                    onChange={(e) => setFormData({ ...formData, storage: e.target.value })}
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      outline: 'none',
                      background: '#fff',
                      cursor: 'pointer'
                    }}
                  >
                    <option value="">Ch·ªçn v·ªã tr√≠ l∆∞u tr·ªØ</option>
                    {storageOptions.map(option => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Right Column */}
              <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Ng√†y nh·∫≠p
                  </label>
                  <input
                    type="text"
                    value={formData.dateImport}
                    onChange={(e) => setFormData({ ...formData, dateImport: e.target.value })}
                    placeholder="dd/mm/yyyy"
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    H·∫°n s·ª≠ d·ª•ng
                  </label>
                  <input
                    type="text"
                    value={formData.expiry}
                    onChange={(e) => setFormData({ ...formData, expiry: e.target.value })}
                    placeholder="dd/mm/yyyy"
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    S·ªë l∆∞·ª£ng
                  </label>
                  <input
                    type="text"
                    value={formData.stock}
                    onChange={(e) => setFormData({ ...formData, stock: e.target.value })}
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>

                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontSize: '14px', fontWeight: '500', color: '#374151' }}>
                    Nh√† cung c·∫•p
                  </label>
                  <input
                    type="text"
                    value={formData.supplier}
                    onChange={(e) => setFormData({ ...formData, supplier: e.target.value })}
                    style={{
                      width: '100%',
                      padding: '12px 16px',
                      border: '1px solid #d1d5db',
                      borderRadius: '8px',
                      fontSize: '14px',
                      outline: 'none',
                      transition: 'border-color 0.2s'
                    }}
                    onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
                    onBlur={(e) => e.target.style.borderColor = '#d1d5db'}
                  />
                </div>
              </div>
            </div>

            {/* Buttons */}
            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '16px' }}>
              <button
                type="button"
                onClick={handleCancel}
                style={{
                  padding: '12px 24px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  background: '#fff',
                  color: '#374151',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  transition: 'all 0.2s'
                }}
                onMouseOver={(e) => {
                  e.currentTarget.style.background = '#f9fafb';
                  e.currentTarget.style.borderColor = '#9ca3af';
                }}
                onMouseOut={(e) => {
                  e.currentTarget.style.background = '#fff';
                  e.currentTarget.style.borderColor = '#d1d5db';
                }}
              >
                Quay l·∫°i
              </button>
              <button
                type="submit"
                style={{
                  padding: '12px 24px',
                  border: 'none',
                  borderRadius: '8px',
                  background: '#3b82f6',
                  color: '#fff',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  transition: 'background-color 0.2s'
                }}
                onMouseOver={(e) => e.currentTarget.style.background = '#2563eb'}
                onMouseOut={(e) => e.currentTarget.style.background = '#3b82f6'}
              >
                L∆∞u l·∫°i
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default EditVT;
