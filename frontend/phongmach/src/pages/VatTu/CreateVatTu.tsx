import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useVatTu } from '../../contexts/VatTuContext';
import Sidebar from '../../components/Sidebar';
import appIcon from '../../assets/appicon.png';

const storageOptions = [
  "T·ªß v·∫≠t t∆∞ 1", "T·ªß v·∫≠t t∆∞ 2", "T·ªß v·∫≠t t∆∞ 3", "T·ªß v·∫≠t t∆∞ 4", "T·ªß v·∫≠t t∆∞ 5"
];

const typeOptions = [
  "Ti√™u hao d√πng 1 l·∫ßn",
  "Ti√™u hao nhi·ªÅu l·∫ßn",
  "D·ª•ng c·ª• h·ªó tr·ª£ kh√°m",
  "Thi·∫øt b·ªã vƒÉn ph√≤ng"
];

const nameOptionsByType: Record<string, string[]> = {
  "Ti√™u hao d√πng 1 l·∫ßn": [
    "GƒÉng tay cao su", "GƒÉng tay nitrile", "Kh·∫©u trang 3 l·ªõp", "Kim ti√™m 23G/25G",
    "·ªêng ti√™m 1ml", "·ªêng ti√™m 3ml", "·ªêng ti√™m 5ml", "G·∫°c v√¥ tr√πng", "B√¥ng th·∫•m",
    "BƒÉng cu·ªôn", "·ªêng nghi·ªám m√°u", "Que th·ª≠ ƒë∆∞·ªùng huy·∫øt", "Que th·ª≠ n∆∞·ªõc ti·ªÉu"
  ],
  "Ti√™u hao nhi·ªÅu l·∫ßn": [
    "C·ªìn 70 ƒë·ªô", "Chlorhexidine", "Gel r·ª≠a tay", "KhƒÉn lau tay", "Gi·∫•y kh√°m b·ªánh",
    "Gi·∫•y x√©t nghi·ªám", "TƒÉm b√¥ng v√¥ tr√πng", "Que ƒë√® l∆∞·ª°i g·ªó"
  ],
  "D·ª•ng c·ª• h·ªó tr·ª£ kh√°m": [
    "ƒê√®n soi tai", "G∆∞∆°ng soi h·ªçng", "·ªêng n·ªôi soi nh·ªè", "M√°y ƒëo huy·∫øt √°p ƒëi·ªán t·ª≠",
    "M√°y ƒëo huy·∫øt √°p th·ªßy ng√¢n", "·ªêng nghe y t·∫ø 1 ƒë·∫ßu", "·ªêng nghe y t·∫ø 2 ƒë·∫ßu",
    "Glucometer", "Que th·ª≠ ƒë∆∞·ªùng huy·∫øt", "Nhi·ªát k·∫ø h·ªìng ngo·∫°i", "Nhi·ªát k·∫ø ƒëi·ªán t·ª≠",
    "M√°y x√©t nghi·ªám n∆∞·ªõc ti·ªÉu", "M√°y test nhanh n∆∞·ªõc ti·ªÉu"
  ],
  "Thi·∫øt b·ªã vƒÉn ph√≤ng": [
    "M√°y in phi·∫øu kh√°m", "Gi·∫•y in toa thu·ªëc", "Th·∫ª t·ª´", "H·ªì s∆°", "S·ªï kh√°m",
    "ƒê∆°n thu·ªëc", "H√≥a ƒë∆°n"
  ]
};

function CreateVatTu() {
  const navigate = useNavigate();
  const { addVatTu } = useVatTu();
  const [menuOpen, setMenuOpen] = useState(false);
  
  // Form state
  const [type, setType] = useState(typeOptions[0]);
  const [name, setName] = useState(nameOptionsByType[typeOptions[0]][0]);
  const [price, setPrice] = useState('');
  const [storage, setStorage] = useState(storageOptions[0]);
  const [dateImport, setDateImport] = useState('');
  const [expiry, setExpiry] = useState('');
  const [stock, setStock] = useState('');
  const [supplier, setSupplier] = useState('');

  // Validation state
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!name) newErrors.name = 'Vui l√≤ng ch·ªçn t√™n v·∫≠t t∆∞';
    if (!price) newErrors.price = 'Vui l√≤ng nh·∫≠p gi√°';
    else if (isNaN(Number(price))) newErrors.price = 'Gi√° ph·∫£i l√† s·ªë';
    if (!type) newErrors.type = 'Vui l√≤ng ch·ªçn lo·∫°i v·∫≠t t∆∞';
    if (!storage) newErrors.storage = 'Vui l√≤ng ch·ªçn v·ªã tr√≠ l∆∞u tr·ªØ';
    if (!dateImport) newErrors.dateImport = 'Vui l√≤ng nh·∫≠p ng√†y nh·∫≠p';
    if (!expiry) newErrors.expiry = 'Vui l√≤ng nh·∫≠p h·∫°n s·ª≠ d·ª•ng';
    if (!stock) newErrors.stock = 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng';
    else if (isNaN(Number(stock))) newErrors.stock = 'S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë';
    if (!supplier) newErrors.supplier = 'Vui l√≤ng nh·∫≠p nh√† cung c·∫•p';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      addVatTu({
        name,
        price,
        type,
        storage,
        dateImport,
        expiry,
        stock,
        supplier
      });
      navigate('/qlvattu');
    }
  };

  const handleTypeChange = (newType: string) => {
    setType(newType);
    // Reset name when type changes to avoid invalid name for type
    setName(nameOptionsByType[newType][0]);
  };

  return (
    <div style={{ minHeight: '100vh', width: '100vw', display: 'flex', background: '#f5f6fa', position: 'relative' }}>
      {/* Sidebar */}
      <Sidebar activePage="V·∫≠t t∆∞" />
      {/* Main content */}
      <div style={{ flex: 1, padding: '32px 0 0 0', minWidth: 0, display: 'flex', flexDirection: 'column' }}>
        {/* Top right menu */}
        <div style={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center', gap: 16, flexWrap: 'wrap', padding: '0 32px' }}>
          <img src={appIcon} alt="logo" style={{ width: 40, borderRadius: '50%' }} />
          <span style={{ fontWeight: 500, fontSize: 18, color: '#2d4a7a' }}>M·∫°nh</span>
          <div style={{ position: 'relative' }}>
            <button
              style={{ background: 'none', border: 'none', cursor: 'pointer', fontSize: 18 }}
              onClick={() => setMenuOpen(!menuOpen)}
            >
              ‚ñº
            </button>
            {menuOpen && (
              <div style={{ position: 'absolute', right: 0, top: 32, background: '#fff', boxShadow: '0 2px 8px #0002', borderRadius: 8, minWidth: 220, zIndex: 10 }}>
                <div onClick={() => navigate('/profile')}
                  style={{ padding: '12px 28px', cursor: 'pointer', borderBottom: '1px solid #eee', display: 'flex', alignItems: 'center', gap: 12, whiteSpace: 'nowrap' }}>
                  <span>üë§</span> Th√¥ng tin c√° nh√¢n
                </div>
                <div onClick={() => navigate('/changepassword')}
                  style={{ padding: '12px 28px', cursor: 'pointer', borderBottom: '1px solid #eee', display: 'flex', alignItems: 'center', gap: 12, whiteSpace: 'nowrap' }}>
                  <span>üîë</span> ƒê·ªïi m·∫≠t kh·∫©u
                </div>
                <div onClick={() => navigate('/login')}
                  style={{ padding: '12px 28px', cursor: 'pointer', color: 'red', display: 'flex', alignItems: 'center', gap: 12, whiteSpace: 'nowrap' }}>
                  <span>‚èª</span> Tho√°t
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Form content */}
        <div style={{ padding: '0 32px', marginTop: 18, marginBottom: 24 }}>
          <div style={{ background: '#fff', borderRadius: 16, padding: 32, maxWidth: 800, margin: '0 auto', boxShadow: '0 2px 12px #0001' }}>
            <div style={{ fontSize: '2rem', fontWeight: 600, marginBottom: 24 }}>Th√™m v·∫≠t t∆∞ m·ªõi</div>
            
            <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>
              {/* Type selection */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>Lo·∫°i v·∫≠t t∆∞:</label>
                <select
                  value={type}
                  onChange={(e) => handleTypeChange(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                >
                  {typeOptions.map(opt => (
                    <option key={opt} value={opt}>{opt}</option>
                  ))}
                </select>
                {errors.type && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.type}</div>}
              </div>

              {/* Name selection */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>T√™n v·∫≠t t∆∞:</label>
                <select
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                >
                  {nameOptionsByType[type].map(opt => (
                    <option key={opt} value={opt}>{opt}</option>
                  ))}
                </select>
                {errors.name && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.name}</div>}
              </div>

              {/* Price */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>Gi√° (VNƒê):</label>
                <input
                  type="text"
                  value={price}
                  onChange={(e) => setPrice(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                  placeholder="Nh·∫≠p gi√° v·∫≠t t∆∞"
                />
                {errors.price && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.price}</div>}
              </div>

              {/* Storage location */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>V·ªã tr√≠ l∆∞u tr·ªØ:</label>
                <select
                  value={storage}
                  onChange={(e) => setStorage(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                >
                  {storageOptions.map(opt => (
                    <option key={opt} value={opt}>{opt}</option>
                  ))}
                </select>
                {errors.storage && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.storage}</div>}
              </div>

              {/* Import date */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>Ng√†y nh·∫≠p:</label>
                <input
                  type="date"
                  value={dateImport}
                  onChange={(e) => setDateImport(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                />
                {errors.dateImport && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.dateImport}</div>}
              </div>

              {/* Expiry date */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>H·∫°n s·ª≠ d·ª•ng:</label>
                <input
                  type="date"
                  value={expiry}
                  onChange={(e) => setExpiry(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                />
                {errors.expiry && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.expiry}</div>}
              </div>

              {/* Stock quantity */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>S·ªë l∆∞·ª£ng:</label>
                <input
                  type="text"
                  value={stock}
                  onChange={(e) => setStock(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                  placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng"
                />
                {errors.stock && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.stock}</div>}
              </div>

              {/* Supplier */}
              <div>
                <label style={{ display: 'block', marginBottom: 8, fontWeight: 500 }}>Nh√† cung c·∫•p:</label>
                <input
                  type="text"
                  value={supplier}
                  onChange={(e) => setSupplier(e.target.value)}
                  style={{ width: '100%', padding: '10px 12px', borderRadius: 8, border: '1px solid #ccc', fontSize: 16 }}
                  placeholder="Nh·∫≠p t√™n nh√† cung c·∫•p"
                />
                {errors.supplier && <div style={{ color: 'red', fontSize: 14, marginTop: 4 }}>{errors.supplier}</div>}
              </div>

              {/* Submit buttons */}
              <div style={{ display: 'flex', gap: 12, marginTop: 8 }}>
                <button
                  type="submit"
                  style={{ background: '#1ec9a4', color: '#fff', border: 'none', borderRadius: 8, padding: '12px 32px', fontWeight: 500, fontSize: 16, cursor: 'pointer' }}
                >
                  Th√™m v·∫≠t t∆∞
                </button>
                <button
                  type="button"
                  onClick={() => navigate('/qlvattu')}
                  style={{ background: '#eee', color: '#333', border: 'none', borderRadius: 8, padding: '12px 32px', fontWeight: 500, fontSize: 16, cursor: 'pointer' }}
                >
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}

export default CreateVatTu;
